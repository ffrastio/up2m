{"remainingRequest":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\src\\views\\Author.vue?vue&type=template&id=78651276&scoped=true&","dependencies":[{"path":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\src\\views\\Author.vue","mtime":1619717025912},{"path":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\FFrastio\\Documents\\GitHub\\up2m\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}